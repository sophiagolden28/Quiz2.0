/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.quiznew;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Sound Room
 */
public class QuizDriverGUI extends javax.swing.JFrame {

    /**
     * Creates new form QuizDriverGUI
     */
    public QuizDriverGUI() {

        initComponents();

        //setting title
        setTitle("Setup");
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        RadioButtonOnline = new javax.swing.JRadioButton();
        RadioButtonOffline = new javax.swing.JRadioButton();
        ButtonContinue = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Is your device online or offline?");

        buttonGroup1.add(RadioButtonOnline);
        RadioButtonOnline.setText("Online");

        buttonGroup1.add(RadioButtonOffline);
        RadioButtonOffline.setText("Offline");

        ButtonContinue.setText("Continue");
        ButtonContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonContinueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(104, Short.MAX_VALUE)
                .addComponent(RadioButtonOnline, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RadioButtonOffline, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(ButtonContinue)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RadioButtonOnline)
                    .addComponent(RadioButtonOffline))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(ButtonContinue)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonContinueActionPerformed

        //CONTINUE BUTTON - if one is selected, open the quiz with the corresponding set of questions
        //IF ELSE STATEMENT: IF RADIO BUTTON 1 IS SELECTED THEN WE RUN THE ONLINE OPTION, IF RADIO BUTTON 2, WE RUN THE OFFLINE OPTION,
        //THIS CAN BE DONE BY RUNNING THE TITLE SCREEN PASSING THROUGH A DIFFERENT QUESTIONS ARRAY BASED ON THE USER'S CHOICE
        //if they are OFFLINE
        if (RadioButtonOffline.isSelected()) {

            //read in the questions and add their text to an arraylist
            ArrayList<String> questionLines = new ArrayList<String>();

            //reading in the questions
            try {

                File myFile = new File("quiz_single_line.txt");
                Scanner scanner = new Scanner(myFile);

                while (scanner.hasNextLine()) {

                    String questionText = scanner.nextLine();
                    questionLines.add(questionText);

                }

            } catch (FileNotFoundException e) {

                System.out.println("ERROR - FILE NOT FOUND");
            }

            //loop through lines and split them individually, and create a question object and add it to this array
            ArrayList<Question> Questions = new ArrayList<Question>();

            //a counter var to keep track to add to the quiz object
            int counter = 1;

            //looping through the lines and making them their own question objects
            for (String q : questionLines) {

                ArrayList<String> componentsList = new ArrayList<>(Arrays.asList(q.split(", ")));

                String questionText = componentsList.get(0);
                String option1 = componentsList.get(1);
                String option2 = componentsList.get(2);
                String option3 = componentsList.get(3);
                String option4 = componentsList.get(4);
                String correctAnswer = componentsList.get(5);

                Question question = new Question(questionText, option1, option2, option3, option4, correctAnswer, counter, false, 0);

                Questions.add(question);

                counter += 1;
            }

            //shuffle the questions array
            Collections.shuffle(Questions);

            //run title screen and pass in questions, and from there run gui app and pass in questions
            TitleScreenGUI titleScreenRun = new TitleScreenGUI(Questions);

            //and trash this screen
            this.dispose();
        }

        //if they are ONLINE
        if (RadioButtonOnline.isSelected()) {
            try {
                //a counter var to keep track to add to the quiz object
                int counter = 1;

                //new Question Array
                ArrayList<Question> Questions = new ArrayList<Question>();

                //take in questions from the internet and put them one by one into the array then run title screen
                //Creating Request
                CloseableHttpClient httpclient = HttpClients.createDefault();

                HttpGet httpget = new HttpGet("https://opentdb.com/api.php");

                URI uri = new URIBuilder(httpget.getURI())
                        .addParameter(" amount", "10")
                        .addParameter("difficulty", "easy")
                        .addParameter("type", "multiple")
                        .build();

                httpget.setURI(uri);

                // Create a custom response handler
                ResponseHandler<String> responseHandler = (org.apache.http.HttpResponse hr) -> {
                    int status = hr.getStatusLine().getStatusCode();
                    if (status >= 200 && status < 300) {
                        HttpEntity entity = hr.getEntity();
                        return entity != null ? EntityUtils.toString(entity) : null;
                    } else {
                        throw new ClientProtocolException("Unexpected response status: " + status);
                    }
                };

                //Executing request
                String responseBody = "";

                responseBody = httpclient.execute(httpget, responseHandler);

                //make jsonobject
                JSONObject json = new JSONObject(responseBody);

                //this contains json objects
                JSONArray questions = json.getJSONArray("results");

                for (int i = 0; i < questions.length(); i++) {

                    //make vars to make the question objects
                    JSONObject question = questions.getJSONObject(i);

                    String q = question.getString("question");
                    ArrayList<String> allPossibleAnswers = new ArrayList<String>();
                    String correctAnswer = question.getString("correct_answer");

                    JSONArray incorrectAnswers = question.getJSONArray("incorrect_answers");
                    //add incorrect answers and correct answer into all possible answers
                    allPossibleAnswers.add(incorrectAnswers.getString(0));
                    allPossibleAnswers.add(incorrectAnswers.getString(1));
                    allPossibleAnswers.add(incorrectAnswers.getString(2));

                    allPossibleAnswers.add(correctAnswer);

                    //shuffle the question answers
                    Collections.shuffle(allPossibleAnswers);

                    //make option vars
                    String option1 = allPossibleAnswers.get(0);
                    String option2 = allPossibleAnswers.get(1);
                    String option3 = allPossibleAnswers.get(2);
                    String option4 = allPossibleAnswers.get(3);

                    //make options into 4 separate vars and set them to these but correct answer stays correct answer since it goes off string
                    Question questionObject = new Question(q, option1, option2, option3, option4, correctAnswer, counter, false, 0);

                    //add the question to the array
                    Questions.add(questionObject);

                }

                //shuffle the questions array
                Collections.shuffle(Questions);

                //run title screen and pass in questions, and from there run gui app and pass in questions
                TitleScreenGUI titleScreenRun = new TitleScreenGUI(Questions);

                //and trash this screen
                this.dispose();

            } catch (IOException ex) {
                Logger.getLogger(QuizDriverGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (URISyntaxException ex) {
                Logger.getLogger(QuizDriverGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        
    }//GEN-LAST:event_ButtonContinueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuizDriverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuizDriverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuizDriverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuizDriverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuizDriverGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonContinue;
    private javax.swing.JRadioButton RadioButtonOffline;
    private javax.swing.JRadioButton RadioButtonOnline;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
